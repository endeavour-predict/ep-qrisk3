/* 
 * (c) 2013 ClinRisk Ltd.  All rights reserved.
 * This file has been auto-generated.
 * XML source: z3_ratio_predictor_0_2013.xml
 * STATA dta time stamp: 6 Nov 2012 10:19
 * .NET file create date: Sat 16 Mar 2013 14:51:10 GMT
 */

using System;
using CRStandardDefinitions;

namespace ClinRiskAutogenerated 
{
	public class z3_ratio_predictor_0_2013 {
		/* ratio */

		static private double ratio_female_raw(
			int age,int b_cvd,int b_treatedhyp,int b_type1,int b_type2,int ethrisk,int smoke_cat
		)
		{

			/* The conditional arrays */

			double[] Iethrisk = {
				0,
				0,
				0.1112241569956648100000000,
				0.2695469172693911700000000,
				0.4647634745430522200000000,
				0.0606704410245332490000000,
				-0.1783594056906685500000000,
				-0.1590817509218349600000000,
				-0.1254762486419256600000000,
				-0.0964435915269335750000000
			};
			double[] Ismoke = {
				0,
				0.0192589041690785880000000,
				0.1738957349355480800000000,
				0.3274787829769870200000000,
				0.4694979720380834100000000
			};

			/* Applying the fractional polynomial transforms */
			/* (which includes scaling)                      */

			double dage = age;
			dage=dage/10;
			double age_1 = dage;
			double age_2 = Math.Pow(dage,2);

			/* The normalisation coefficients */

			double mage_1 = 5.361288547515869;
			double mage_2 = 28.743415832519531;

			/* Centring the continuous variables */

			age_1 = age_1 - mage_1;
			age_2 = age_2 - mage_2;

			/* Start of Sum */
			double a=0;

			/* The conditional sums */

			a += Iethrisk[ethrisk];
			a += Ismoke[smoke_cat];

			/* The continuous coefficients */

			double cage_1 = 0.2104956025350188700000000;
			double cage_2 = -0.0196647657037204300000000;

			/* Sum from continuous values */

			a += age_1 * cage_1;
			a += age_2 * cage_2;

			/* The boolean coefficients */

			double cb_cvd = -0.2365934191233413900000000;
			double cb_treatedhyp = 0.0274882238396218890000000;
			double cb_type1 = -0.3208011684032861500000000;
			double cb_type2 = 0.0132981896350019990000000;

			/* Sum from boolean values */

			a += b_cvd * cb_cvd;
			a += b_treatedhyp * cb_treatedhyp;
			a += b_type1 * cb_type1;
			a += b_type2 * cb_type2;

			/* The interaction coefficients */


			/* Sum from interaction terms */


			/* Calculate the score itself */
			double constant =  3.5446169390183861000000000;
			double score = a + constant;
			return score;
		}

		static public Double ratio_female(
			int age,bool b_cvd,bool b_treatedhyp,DiabetesCat diabetes_cat,Ethnicity ethnicity,SmokeCat smoke_cat
		)
		{
            // put age within allowed bounds
            if (age < 25)
                age = 25;
            if (age > 99)
                age = 99;
            Double score;
			double tmp = ratio_female_raw(
				age,	// age must lie in range (25 .. 99)
				Utilities.boolToInt(b_cvd),
				Utilities.boolToInt(b_treatedhyp),
				Utilities.diabetescatToType1(diabetes_cat),
				Utilities.diabetescatToType2(diabetes_cat),
				Utilities.ethnicityToEthrisk(ethnicity),
				Utilities.smokecatToInt(smoke_cat)
			);
			tmp = Math.Round(tmp*1000000.0)/1000000.0;
			score = tmp;

			return score;
		}

		/* End of ratio */

	}
}
