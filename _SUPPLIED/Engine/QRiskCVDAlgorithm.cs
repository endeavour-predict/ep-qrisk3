//
// (c) 2008-23 ClinRisk Ltd.
// All rights reserved.
//
// No unauthorised copying, distribution, modification, creating derived works, 
// or even compilation allowed, unless express permission has been granted by 
// ClinRisk Ltd.
//

using System;
using System.Text;

using CRStandardDefinitions;
using ClinRiskAutogenerated;

namespace QRISK3Engine
{
    public class QRiskCVDAlgorithmCalculator
    {
        public const int minAge = 25;
        public const int maxAge = 84;

        private bool locked = true;

        public class QRISK3SDKException : System.Exception
        {
            public QRISK3SDKException()
            {
            }

            public QRISK3SDKException(string message)
                : base(message)
            {
            }
        }

        public QRiskCVDAlgorithmCalculator(string userName, string key)
        {
            // This used to contain a key mechanism
            locked = false;        
        }
       
        // bmi, rati and sbp can be either null or double
        public QRiskCVDResults calculate(
            bool b_cvd,
            Gender sex,
            int age, 
            bool b_AF, bool b_atypicalantipsy, bool b_corticosteroids, bool b_impotence2, bool b_migraine, bool b_ra, bool b_renal, bool b_semi, bool b_sle, bool b_treatedhyp, 
            DiabetesCat diabetes_cat, 
            double? bmi, 
            Ethnicity ethnicity, 
            bool fh_cvd, 
            double? rati, 
            double? sbp, 
            double? sbps5, 
            SmokeCat smoke_cat, 
            double? town
          )
        {
            QRiskCVDResults Results = new QRiskCVDResults();
            Results.resultStatus = ResultStatus.CALCULATED_USING_PATIENTS_OWN_DATA;

            if (locked)
            {
                Results.reason = ReasonInvalid.QRISK_ENGINE_LOCKED;
                Results.resultStatus = ResultStatus.NO_CALCULATION_POSSIBLE_AS_ENGINE_LOCKED;
                return Results;
            }
            // Check to see whether or not we are allowed to use the score
            // Age must be approprite, patient must not have cvd

            // minAge =< age <= maxAge
            if (age < minAge || age > maxAge)
            {
                Results.resultStatus = ResultStatus.NO_CALCULATION_POSSIBLE_AS_PATIENT_FAILED_CRITERIA;
                Results.reason = ReasonInvalid.AGE_OUT_OF_RANGE;
                return Results;
            }

            // does not apply if already had a CVD event
            if (b_cvd == true)
            {
                Results.resultStatus = ResultStatus.NO_CALCULATION_POSSIBLE_AS_PATIENT_FAILED_CRITERIA;
                Results.reason = ReasonInvalid.ALREADY_HAD_A_CVD_EVENT;
                return Results;
            }

            // if smoking status is unknown, set to non-smoker
            if (smoke_cat == SmokeCat.NotKnown)
            {
                smoke_cat = SmokeCat.NonSmoker;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.smokingStatus.data = Data.MISSING;
                Results.DataQuality.smokingStatus.substitute_value = SmokeCat.NonSmoker.ToString();
            }

            // if ethnicity not known, set to default
            if (ethnicity == Ethnicity.NotRecorded || ethnicity == Ethnicity.NotStated)
            {
                ethnicity = Ethnicity.British;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.ethnicity.data = Data.MISSING;
                Results.DataQuality.ethnicity.substitute_value = Ethnicity.British.ToString();
            }

            // Now pull in estimates if appropriate

            // if no townsend score is passed, use 0.0
            if (!town.HasValue)
            {
                town = 0.0;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.townsend.data = Data.MISSING;
                Results.DataQuality.townsend.substitute_value = town.Value;
            }
            
            // if sbps5 is not known, use 0.0
            if (!sbps5.HasValue)
            {
                sbps5 = 0.0;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.sbps5.data = Data.MISSING;
                Results.DataQuality.sbps5.substitute_value = sbps5.Value;
            }

            if (!rati.HasValue)
            {
                cholRatioPredictor.CholRatioPredictorResults cholPredictorResults = cholRatioPredictor.CholRatioPredictor.estimate(
                    sex,
                    age,
                    false,
                    b_treatedhyp,
                    diabetes_cat,
                    ethnicity,
                    smoke_cat
                    );
                if (!cholPredictorResults.cholRatio.HasValue)
                {
                    string err = "cholRatioPredictor problem:" + cholPredictorResults.ToString();
                    throw new QRISK3SDKException(err);
                }
                rati = cholPredictorResults.cholRatio.Value; 
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.ratio.data = Data.MISSING;
                Results.DataQuality.ratio.substitute_value = rati.Value;
            }
            if (!bmi.HasValue)
            {              
                bmiPredictor.BmiPredictorResults bmiPredictorResults = bmiPredictor.BmiPredictor.estimate(
                    sex,
                    age,
                    false,
                    b_treatedhyp,
                    diabetes_cat,
                    ethnicity,
                    smoke_cat
                    );
                if (!bmiPredictorResults.bmi.HasValue)
                {
                    string err = "bmiPredictor problem:" + bmiPredictorResults.ToString();
                    throw new QRISK3SDKException(err);
                }
                bmi = bmiPredictorResults.bmi.Value;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.bmi.data = Data.MISSING;
                Results.DataQuality.bmi.substitute_value = bmi.Value;
            }
            if (!sbp.HasValue)
            {
                sbpPredictor.SbpPredictorResults sbpPredictorResults = sbpPredictor.SbpPredictor.estimate(
                    sex,
                    age,
                    false,
                    b_treatedhyp,
                    diabetes_cat,
                    ethnicity,
                    smoke_cat
                    );
                if (!sbpPredictorResults.sbp.HasValue)
                {
                    string err = "sbpPredictor problem:" + sbpPredictorResults.ToString();
                    throw new QRISK3SDKException(err);
                }
                sbp = sbpPredictorResults.sbp.Value;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.sbp.data = Data.MISSING;
                Results.DataQuality.sbp.substitute_value = sbp.Value;
            }

            // If the data is there, but outside normal limits, then use sensible extremes

            // put townsend within limits;
            if (town < Constants.minTown)
            {
                town = Constants.minTown;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.townsend.data = Data.OUT_OF_RANGE;
                Results.DataQuality.townsend.substitute_value = town.Value;
            }
            if (town > Constants.maxTown)
            {
                town = Constants.maxTown;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.townsend.data = Data.OUT_OF_RANGE;
                Results.DataQuality.townsend.substitute_value = town.Value;
            }

            // put cholesterol within limits;
            if (rati < Constants.minRati)
            {
                rati = Constants.minRati;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.ratio.data = Data.OUT_OF_RANGE;
                Results.DataQuality.ratio.substitute_value = rati.Value;
            }
            if (rati > Constants.maxRati)
            {
                rati = Constants.maxRati;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.ratio.data = Data.OUT_OF_RANGE;
                Results.DataQuality.ratio.substitute_value = rati.Value;
            }

            // put BMI into range
            if (bmi < Constants.minBmi)
            {
                bmi = Constants.minBmi;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.bmi.data = Data.OUT_OF_RANGE;
                Results.DataQuality.bmi.substitute_value = bmi.Value;
            }
            if (bmi > Constants.maxBmi)
            {
                bmi = Constants.maxBmi;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.bmi.data = Data.OUT_OF_RANGE;
                Results.DataQuality.bmi.substitute_value = bmi.Value;
            }

            // put sbp into range
            if (sbp < Constants.minSbp)
            {
                sbp = Constants.minSbp;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.sbp.data = Data.OUT_OF_RANGE;
                Results.DataQuality.sbp.substitute_value = sbp.Value;
            }
            if (sbp > Constants.maxSbp)
            {
                sbp = Constants.maxSbp;
                Results.resultStatus = ResultStatus.CALCULATED_USING_ESTIMATED_OR_CORRECTED_DATA;
                Results.DataQuality.sbp.data = Data.OUT_OF_RANGE;
                Results.DataQuality.sbp.substitute_value = sbp.Value;
            }

            // All extremes done now, let's calculate the score.

            if (Results.resultStatus!=ResultStatus.NO_CALCULATION_POSSIBLE_AS_PATIENT_FAILED_CRITERIA)
            {
                if (sex == Gender.Female)
                {
                    Results.score = Q104_model_53_0.cvd_female(age, b_AF, b_atypicalantipsy, b_corticosteroids, b_migraine, b_ra, b_renal, b_semi, b_sle, b_treatedhyp, diabetes_cat, bmi.Value, ethnicity, fh_cvd, rati.Value, sbp.Value, sbps5.Value, smoke_cat, 10, town.Value);

                }
                else
                {
                    Results.score = Q104_model_53_1.cvd_male(age, b_AF, b_atypicalantipsy, b_corticosteroids, b_impotence2, b_migraine, b_ra, b_renal, b_semi, b_sle, b_treatedhyp, diabetes_cat, bmi.Value, ethnicity, fh_cvd, rati.Value, sbp.Value, sbps5.Value, smoke_cat, 10, town.Value);
                }

            }

            // Get score a typical person of this age and sex

            Results.typical_score = QRiskReferenceScores.get_score(
                Utilities.genderToInt(sex), 
                age, 
                Utilities.ethnicityToEthrisk(ethnicity)
            );
            Results.qHeartAge = QRiskAge(
                Utilities.genderToInt(sex), 
                Utilities.ethnicityToEthrisk(ethnicity),
                Results.score);

            return Results;
        }

        private int? QRiskAge(int sex, int ethrisk, double score)
        {
            try
            {
                for (int i = QRiskReferenceScores.minAge; i <= QRiskReferenceScores.maxAge; i++)
                {
                    double tScore = QRiskReferenceScores.get_score(sex, i, ethrisk);
                    if (tScore > score)
                    {
                        return i;
                    }
                }
            }
            catch
            {
                return -1;
            }
            return null;
        }

        public int? QRiskAge(Gender sex, Ethnicity ethnicity, double score)
        {
            int? result = null;

            result = QRiskAge(
                Utilities.genderToInt(sex),
                Utilities.ethnicityToEthrisk(ethnicity),
                score);

            if (result == -1)
            {
                throw new QRISK3SDKException("Problem in calculating QRISK3 Heart Age");
            }
            return result;
        }

        public static string version()
        {
            string s = "QRISK3 algorithm v. 2018.0";
            return s;
        }

        public static string disclaimer()
        {
            StringBuilder sb = new StringBuilder(800);
            sb.Append("This Product is intended to aid and supplement, not substitute for, the expertise ");
            sb.Append("and judgement of physicians, pharmacists or other healthcare ");
            sb.Append("professionals. All information is provided on the basis that the healthcare ");
            sb.Append("practitioners responsible for patient care will retain full and sole ");
            sb.Append("responsibility for deciding any treatment to prescribe or dispense for all ");
            sb.Append("patients and, in particular whether the use of information provided by the ");
            sb.Append("Product is safe, appropriate, or effective for any particular patient or in any ");
            sb.Append("particular circumstances.");

            return sb.ToString();
        }
    }
}